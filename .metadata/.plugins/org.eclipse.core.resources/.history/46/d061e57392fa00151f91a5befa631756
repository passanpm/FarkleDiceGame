package edu.plu.cs.farkle.server.auth;

import java.io.IOException;
import java.util.List;
import java.util.StringTokenizer;

import javax.annotation.Priority;
import javax.ws.rs.Priorities;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.ext.Provider;

import org.jboss.resteasy.core.Headers;
import org.jboss.resteasy.core.ResourceMethodInvoker;
import org.jboss.resteasy.core.ServerResponse;
import org.jboss.resteasy.util.Base64;


@Provider
@Priority(Priorities.AUTHENTICATION)
public class AuthenticatorFilter implements ContainerRequestFilter {

	/**
	 * This method is called prior to every request.  It reads the HTTP 
	 * Authorization header and attempts to authenticate the client.  If successful,
	 * it inserts a SecurityContext object into the request.  Otherwise, it does
	 * nothing.
	 * @return 
	 */
	public void filter(ContainerRequestContext request) throws IOException {
		
		// Get the authorization header (if it exists)
		String authorization = request.getHeaderString(HttpHeaders.AUTHORIZATION);

		
		// If there is no authorization header, do nothing
		if( authorization == null ) 
			return;
		
		// Whether or not this request is over HTTPS
		boolean secure = request.getSecurityContext().isSecure();
				
		// If we get this far, we have an authorization header, so validate the 
		// authorization.

        
		
            //Get request headers
            final MultivaluedMap<String, String> headers = request.getHeaders();
             
            //Fetch authorization header
            final List<String> auth = headers.get("Authorization");
             
             
            //Get encoded username and password
            final String encodedUserPassword = auth.get(0).replaceFirst("Basic" + " ", "");
            
            
            //Decode username and password
            String usernameAndPassword = null;
            try {
                usernameAndPassword = new String(Base64.decode(encodedUserPassword));
            } catch (IOException e) {
           
                return;
            }
 
            //Split username and password tokens
            final StringTokenizer tokenizer = new StringTokenizer(usernameAndPassword, ":");
            final String username = tokenizer.nextToken();
            final String password = tokenizer.nextToken();
            
            redis database = new redis();
             player player = new player(username, password);
             
            
		
		//
		// Currently, this just checks to see if the header is the word "secret".  
		// TODO: Update this to handle a username/password on initial authorization, and
		//     session keys for session management.
		//if( authorization.equals("secret") )
		//{
			// TODO: Create a "real" UserPrincipal
			UserPrincipal user = new UserPrincipal(username + " ; " + password);
			request.setSecurityContext(new FarkleSecurityContext(user, secure));
		//}		
	}
}

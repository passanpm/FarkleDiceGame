package edu.plu.cs.farkle.client;

import java.awt.EventQueue;
import java.awt.Image;
import javax.swing.border.LineBorder;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JMenu;
import java.awt.Canvas;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Panel;
import java.awt.TextField;
import java.awt.Toolkit;

import javax.swing.JLabel;
import com.jgoodies.forms.factories.DefaultComponentFactory;

import redis.clients.jedis.Jedis;

import java.awt.TextArea;
import javax.swing.JTextField;
import javax.swing.JPanel;
import javax.swing.JButton;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.HashMap;
import java.util.Map;

import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.border.BevelBorder;

public class FarkleUI{

	JFrame frmFarkle;
	private JTextField txtScore;
	int[] roll = new int[6];
	private Dice d6 = new Dice();
	Standard standard = new Standard();
	boolean endTurn = false;
	int die = 0;
	private int score = 0;
	private int totalScore = 0;
	private int value = 0;
	private boolean borderOption, borderOption1, borderOption2, borderOption3, borderOption4, borderOption5= false;
	private int rolling = 1;
	Image img;
	JLabel lblDice, label, label_1, label_2, label_3, label_4;
	private JTextField txtOverallScore;
	private JTextField textField;
	static redis server = new redis();
	Player user;
	
	Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	/**
	 * Launch the application.
	 */
	
	public FarkleUI() {
		server.initiateServer(); 
		initialize();
	}
	
	public static void main(String[] args) {
		
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					FarkleUI window = new FarkleUI();
					window.frmFarkle.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		
		
	}
	
	public void restart(){
		txtScore.setText("Score: " + score);
		user.setCurrent(score);
		server.updateCurrent(user);
		d6.roll(6, 1, 6);
		roll = d6.getRoll();
		borderOption = false;
		borderOption1= false;
		borderOption2= false;
		borderOption3= false;
		borderOption4= false;
		borderOption5= false;
		
		lblDice.setBorder(null);
		label.setBorder(null);
		label_1.setBorder(null);
		label_2.setBorder(null);
		label_3.setBorder(null);
		label_4.setBorder(null);
		diceIMG(0, lblDice);
		diceIMG(1, label);
		diceIMG(2, label_1);
		diceIMG(3, label_2);
		diceIMG(4, label_3);
		diceIMG(5, label_4);
		
	}
	
	public void diceIMG(int a, JLabel j){
		die = roll[a];
		switch(die){
		case 1: img = new ImageIcon(this.getClass().getResource("/Dice1.png")).getImage();
				j.setIcon(new ImageIcon(img));
				
				d6.banking(0, die);
				break;
		case 2: img = new ImageIcon(this.getClass().getResource("/Dice2.png")).getImage();
				j.setIcon(new ImageIcon(img));
				value = 2;
				break;
		case 3: img = new ImageIcon(this.getClass().getResource("/Dice3.png")).getImage();
				j.setIcon(new ImageIcon(img));
				value = 3;
				break;
		case 4: img = new ImageIcon(this.getClass().getResource("/Dice4.png")).getImage();
				j.setIcon(new ImageIcon(img));
				value = 4;
				break;
		case 5: img = new ImageIcon(this.getClass().getResource("/Dice5.png")).getImage();
				j.setIcon(new ImageIcon(img));
				value = 5;
				break;
		case 6: img = new ImageIcon(this.getClass().getResource("/Dice6.png")).getImage();
				j.setIcon(new ImageIcon(img));
				value = 6;
				break;
		}
	}
	
	public void diceClick(int diceID, JLabel name, MouseEvent e, Border border, boolean bdrCheck){
		if(!bdrCheck){
			d6.banking(diceID, roll[diceID]);
			if ((e.getModifiers() & ActionEvent.SHIFT_MASK) == ActionEvent.SHIFT_MASK) {
				name.setBorder(BorderFactory.createLineBorder(Color.RED, 2));
				standard.addToSet(roll[diceID]);
            }else{
            	name.setBorder(border);
            	standard.addToSingle(roll[diceID]);
            }
			bdrCheck=true;
		}
		else{
			
			removeDice(name, diceID);
			
			d6.unBank(diceID);
			name.setBorder(null);
			bdrCheck=false;
		}
		
		updateScore();
	}
	
	public void removeDice(JLabel label, int i){
		if ( ((LineBorder) label.getBorder()).getLineColor() == Color.RED ){
			standard.removeFromSet(roll[i]);
		}else{
			standard.removeFromSingle(roll[i]);
		}
	}
	
	public void updateScore() {
		standard.bank();
		score = standard.getScore();
		txtScore.setText("Score: " + score);
	}
	
	public boolean blackout(JLabel dice, boolean b){
		if (b){
			dice.setBorder(BorderFactory.createLineBorder(Color.BLACK, 50));
		}
		return b;	
	}
	
	public void removeBlackout(){
		if (blackout(lblDice, borderOption)==blackout(label, borderOption1)&&
				blackout(label, borderOption1==blackout(label_1, borderOption2)&&
				blackout(label_1, borderOption2)==blackout(label_2, borderOption3)&&
				blackout(label_2, borderOption3)==blackout(label_3, borderOption4)&&
				blackout(label_3, borderOption4)==blackout(label_4, borderOption5)&&
						blackout(label_4, borderOption5)==true
			)){
			restart();
		}
	}
	
	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		
		
		d6.roll(6, 1, 6);
		roll = d6.getRoll();
		frmFarkle = new JFrame();
		frmFarkle.setResizable(false);
		frmFarkle.setTitle("Farkle");
		frmFarkle.setBounds(100, 100, 450, 300);
		frmFarkle.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		JOptionPane input = new JOptionPane();
		String name = input.showInputDialog(frmFarkle, "Enter UserName");
		user = new Player();
		user.setName(name);
		server.auth(user);
		score = user.getCurrent();
		totalScore = user.getTotal();
		input.setVisible(true);
		
		JMenuBar menuBar = new JMenuBar();
		frmFarkle.setJMenuBar(menuBar);
		
		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);
		
		JMenuItem mntmNewGame = new JMenuItem("New Game...");
		mnFile.add(mntmNewGame);
		mntmNewGame.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				score = 0;
			}
			
		});
		
		JMenuItem mntmSave = new JMenuItem("Save");
		mnFile.add(mntmSave);
		
		JMenuItem mntmExit = new JMenuItem("Exit");
		mnFile.add(mntmExit);
		mntmExit.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				System.exit(0);
			}
			
		});
		frmFarkle.getContentPane().setLayout(null);
		
		
		
		
		//Sets up Dice
		
		 Border border = BorderFactory.createLineBorder(Color.BLUE, 2);
		
		
		
		lblDice = new JLabel("");
		lblDice.setBounds(30, 92, 50, 50);
		frmFarkle.getContentPane().add(lblDice);
		
		
		label = new JLabel("");
		label.setBounds(95, 92, 50, 50);
		frmFarkle.getContentPane().add(label);
		
		label_1 = new JLabel("");
		label_1.setBounds(160, 92, 50, 50);
		frmFarkle.getContentPane().add(label_1);
		
		label_2 = new JLabel("");
		label_2.setBounds(225, 92, 50, 50);
		frmFarkle.getContentPane().add(label_2);
		
		label_3 = new JLabel("");
		label_3.setBounds(290, 92, 50, 50);
		frmFarkle.getContentPane().add(label_3);
		
		label_4 = new JLabel("");
		label_4.setBounds(355, 92, 50, 50);
		frmFarkle.getContentPane().add(label_4);
		
		JButton btnRoll = new JButton("Roll");
		btnRoll.setBounds(42, 204, 90, 28);
		frmFarkle.getContentPane().add(btnRoll);
		
		JButton btnEndTurn = new JButton("End Turn");
		btnEndTurn.setBounds(314, 204, 90, 28);
		frmFarkle.getContentPane().add(btnEndTurn);
		
		JPanel StartPanel = new JPanel();
		StartPanel.setBackground(Color.GREEN);
		StartPanel.setForeground(Color.GREEN);
		StartPanel.setBounds(0, 0, 434, 238);
		frmFarkle.getContentPane().add(StartPanel);
		StartPanel.setLayout(null);
		
		Panel panel = new Panel();
		panel.setBounds(10, 5, 403, 62);
		StartPanel.add(panel);
		panel.setBackground(Color.GREEN);
		panel.setLayout(null);
		
		txtScore = new JTextField();
		txtScore.setBounds(134, 0, 115, 20);
		txtScore.setEditable(false);
		txtScore.setText("Score: 0");
		panel.add(txtScore);
		txtScore.setColumns(10);
		
		txtOverallScore = new JTextField();
		txtOverallScore.setBounds(134, 31, 115, 20);
		txtOverallScore.setText("Overall Score: "+totalScore);
		txtOverallScore.setEditable(false);
		txtOverallScore.setColumns(10);
		panel.add(txtOverallScore);
		
		JPanel panel_1 = new JPanel();
		panel_1.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		panel_1.setBackground(Color.GREEN);
		panel_1.setBounds(140, 193, 151, 34);
		StartPanel.add(panel_1);
		
		textField = new JTextField();
		textField.setBackground(Color.GREEN);
		textField.setText(name);///////////////////////////////////////////dfgjbasjkdbfgajksbfkadsbfjkvbadsk.fbadjks,bgfkjasbdf
		textField.setEditable(false);
		panel_1.add(textField);
		textField.setColumns(10);
		
		/*
		 * Handle Dice 0
		 */
		
		diceIMG(0,lblDice);
			lblDice.addMouseListener(new MouseAdapter(){
				@Override
				public void mouseClicked(MouseEvent e){
					diceClick(0,lblDice, e, border, borderOption);

				}
			});
		
		
		
		/*
		 * Handle Dice 1
		 */
		
		diceIMG(1,label);
		label.addMouseListener(new MouseAdapter(){
			@Override
			public void mouseClicked(MouseEvent e){
				diceClick(1, label, e, border, borderOption1);

			}
		});
		
		/*
		 * Handle Dice 2
		 */
		diceIMG(2,label_1);
		label_1.addMouseListener(new MouseAdapter(){
			@Override
			public void mouseClicked(MouseEvent e){
				diceClick(2, label_1, e, border, borderOption2);

			}
		});
		
		/*
		 * Handle Dice 3
		 */
		diceIMG(3,label_2);
		label_2.addMouseListener(new MouseAdapter(){
			@Override
			public void mouseClicked(MouseEvent e){
				diceClick(3, label_2, e, border, borderOption3);

			}
		});
		/*
		 * Handle Dice 4
		 */
		diceIMG(4,label_3);
		label_3.addMouseListener(new MouseAdapter(){
			@Override
			public void mouseClicked(MouseEvent e){
				diceClick(4,label_3, e, border, borderOption4);

			}
		});
		
		/*
		 * Handle Dice 5
		 */
		diceIMG(5,label_4);
		label_4.addMouseListener(new MouseAdapter(){
			@Override
			public void mouseClicked(MouseEvent e){
				diceClick(5, label_4, e, border, borderOption5);

			}
		});
		
		//end turn button listener
		btnEndTurn.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				totalScore += score;
				user.updateTotal(totalScore);
				server.updateTotal(user);
				txtOverallScore.setText("Overall Score: " + totalScore);
				score = 0;
				standard = new Standard();
				lblDice.setBorder(null);
				label.setBorder(null);
				label_1.setBorder(null);
				label_2.setBorder(null);
				label_3.setBorder(null);
				label_4.setBorder(null);
				restart();
				standard.debug();
			}
		});
		
		btnRoll.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				
				d6.roll(6, 1, 6);
				roll = d6.getRoll();
				die = roll[0];
				

				blackout(lblDice, borderOption);
				blackout(label, borderOption1);
				blackout(label_1, borderOption2);
				blackout(label_2, borderOption3);
				blackout(label_3, borderOption4);
				blackout(label_4, borderOption5);
				
				removeBlackout();
				
				diceIMG(0, lblDice);
				diceIMG(1, label);
				diceIMG(2, label_1);
				diceIMG(3, label_2);
				diceIMG(4, label_3);
				diceIMG(5, label_4);
				
				
			}
		});
		
		
		
		}
}

package edu.plu.cs.farkle.client;

import java.io.BufferedReader;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.Response;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.ObjectNode;
import org.jboss.resteasy.client.ClientRequest;
import org.jboss.resteasy.client.ClientResponse;
import org.jboss.resteasy.client.ProxyFactory;
import org.jboss.resteasy.client.jaxrs.BasicAuthentication;
import org.jboss.resteasy.client.jaxrs.ResteasyClient;
import org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;
import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;
import org.jboss.resteasy.plugins.providers.RegisterBuiltin;
import org.jboss.resteasy.spi.HttpResponse;
import org.jboss.resteasy.spi.ResteasyProviderFactory;

import jdk.nashorn.internal.parser.JSONParser;

public class Database {



	public static Player user = new Player();
	private String username;
	private String password;
	//static Database d = new Database("jon", "pass");

	public Database(String username, String password) {
			this.username = username;
			this.password = password;
	}
	public Database(){
		
	}

	public void put(){
		init("put");
	}
	public boolean get(){
		return init("get");
	}
	public void delete(){
		init("delete");
	}
	public void post(){
		init("post");
	}
	
	@SuppressWarnings("finally")
	public boolean init(String action){
		
		Client client = null;
		try {
			client = ClientBuilder.newClient();
			
			ResteasyWebTarget resteasyWebTarget = (ResteasyWebTarget)client.target("http://localhost:8080/farkle/crud");
			resteasyWebTarget.register(new BasicAuthentication(username, password));

			Entity<Player> u = Entity.json(user);
			
			Invocation.Builder builder = resteasyWebTarget.request();
			String r = builder.get(String.class);
			ObjectMapper mapper = new ObjectMapper();
			JsonNode node = mapper.readTree(r);
			
			
			switch (action){
				case "put":
					try {
						//call put
						resteasyWebTarget.request().put(u);
						
						//debug
						System.out.println("PUT: " + username);
						return true;
					} catch (Exception e) {
						return false;
					}
					
				case "delete":
					try {
						//call delete
						resteasyWebTarget.request().delete();
						
						//debug
						System.out.println("DELETE: " + username);
						user = new Player();
						return true;
					} catch (Exception e) {
						return false;
					}
					
				case "post":
					

						//debug
						
						Player neww = new Player();
						neww = user;
						Player old = new Player(username, password);
						user = old;
						
						client.close();
						init("delete");
						
						user = neww;
						username = user.getName();
						password = user.getPass();
						
						System.out.println("POST: " + user.getName());

						//build json with new data from player
						((ObjectNode)node).put("name", user.getName());
						((ObjectNode)node).put("pass", user.getPass());
						((ObjectNode)node).put("wins", Integer.toString(user.getWins()));
						((ObjectNode)node).put("total", Integer.toString(user.getTotal()));
						((ObjectNode)node).put("players", user.getPlayers().toString());
		
						
						client = ClientBuilder.newClient();


						ResteasyWebTarget resteasyWebTarget2 = (ResteasyWebTarget)client.target("http://localhost:8080/farkle/crud");
						
						
						resteasyWebTarget2.request().post(u);
						username = user.getName();
						password = user.getPass();
						//debug
						System.out.println(node.toString());
						
						System.out.println(" DEBUG WINS " + user.getWins());
						break;	
				    
					

					
					

					
				case "get":
					
					try {
	
						//call get
						if (resteasyWebTarget.request().get().equals("jon")){
							System.out.println("GET: Player does not exist");
							return false;
						}
						
						System.out.println(node.toString());
						//update player class
						user.setName(node.get("name").asText());
						//System.out.println("updating name");
						user.setPass(node.get("pass").asText());
						//System.out.println("updating pass");
						user.setTotal(Integer.parseInt(node.get("total").asText()));
						//System.out.println("updating total");
						user.setWins(Integer.parseInt(node.get("wins").asText()));
						//System.out.println("updating wins");
						
						
						System.out.println("-------> " + node.get("players").getTextValue());
						user.setPlayers(node.get("players").getTextValue());
						
						
						System.out.println("updating leaderboard");
						//debug
						System.out.println("GET: " + username);
						System.out.println(node.toString());
						return true;
					} catch (Exception e) {
						System.out.println("Player does not existt");
						return false;
					}
					
			}
			
		} catch (Exception e) {
		}finally{
		client.close();
		}
		return false;
	}
	
	

	
	

}
